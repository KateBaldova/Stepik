#В популярном сериале «Остаться в живых» использовалась последовательность чисел 4 8 15 16 23 42, которая принесла героям удачу и помогла сорвать джекпот в лотерее.
#Напишите программу, которая выводит #данную последовательность чисел с одним пробелом между ними.
#Примечание. Текст '4 8 15 16 23 42' не использовать. Воспользуйтесь возможностью команды print() выводить несколько аргументов, указанных через запятую.

print('4', '8', '15', '16', '23', '42')



#Измените предыдущую программу так, чтобы каждое число последовательности 4 8 15 16 23 42 печаталось на отдельной строке.

print('4')
print('8')
print('15')
print('16')
print('23')
print('42')



#На вход программе подается строка текста – имя человека. Напишите программу, которая выводит на экран приветствие в виде слова «Привет» (без кавычек), после которого должна стоять запятая и пробел, а затем введенное имя.

name = input()
print('Привет,', name)



#Напишите программу, которая приветствует пользователя, выводя слово «Привет» (без кавычек), после которого должна стоять запятая и пробел, а затем введенное имя и восклицательный знак.

name = input()
print('Привет', name, sep=', ', end='!')



# Напишите программу, которая считывает три целых числа и выводит на экран их сумму. Каждое число записано в отдельной строке.

num1 = int(input())
num2 = int(input())
num3 = int(input())
print(num1 + num2 + num3)



'''Напишите программу, вычисляющую объём куба и площадь его полной поверхности, по введённому значению длины ребра.

Формат входных данных
На вход программе подается одно целое число – длина ребра.

Формат выходных данных
Программа должна вывести текст и числа в соответствии с условием задачи.

Примечание. Объём куба и площадь полной поверхности можно вычислить по формулам V = a^3, S = 6a^2'''

len = int(input())
print('Объем =', len**3)
print('Площадь полной поверхности =', 6 * len**2)



# Напишите программу вычисления значения функции f(a, \, b) = 3(a + b)^3 + 275b^2 - 127a - 41 по введеным целым значениям aa и bb.

a = int(input())
b = int(input())
print(3 * (a+b)**3 + 275 * b**2 - 127 * a - 41)



# Напишите программу, которая считывает целое число, после чего на экран выводится следующее и предыдущее целое число с пояснительным текстом.

num1 = int(input())
print('Следующее за числом', num1, 'число:', num1 + 1)
print('Для числа', num1, 'предыдущее число:', num1 - 1)



''' Напишите программу, которая считает стоимость трех компьютеров, состоящих из монитора, системного блока, клавиатуры и мыши.
Формат входных данных
На вход программе подаётся четыре целых числа, каждое на отдельной строке. В первой строке — стоимость монитора, во второй строке — стоимость системного блока, в третьей строке — стоимость клавиатуры и в четвертой строке — стоимость мыши.
Формат выходных данных
Программа должна вывести одно число – стоимость покупки (трех компьютеров).'''

price1 = int(input())
price2 = int(input())
price3 = int(input())
price4 = int(input())
print(3 * (price1 + price2 + price3 + price4))

# 

num1 = int(input())
num2 = int(input())
print(num1, '+', num2, '=', num1 + num2)
print(num1, '-', num2, '=', num1 - num2)
print(num1, '*', num2, '=', num1 * num2)



# Напишите программу, которая находит полное число метров по заданному числу сантиметров.

sm = int(input())
print(sm // 100)



# n школьников делят kk мандаринов поровну, неделящийся остаток остается в корзине. Сколько целых мандаринов достанется каждому школьнику? Сколько целых мандаринов останется в корзине?

school_boys = int(input())
oranges = int(input())
print(oranges // school_boys)
print(oranges % school_boys)



'''Безумный титан Танос собрал все 6 камней бесконечности и намеревается уничтожить половину населения Вселенной по щелчку пальцев. При этом если население Вселенной является нечетным числом, то титан проявит милосердие и округлит количество выживших в большую сторону. Помогите Мстителям подсчитать количество выживших.
Формат входных данных
На вход дается число целое nn – население Вселенной.
Формат выходных данных
Программа должна вывести одно число – количество выживших.'''

n_population = int(input())
if n_population % 2 != 0:
    print(n_population // 2 + 1)
else:
    print(n_population // 2)



# Напишите программу для пересчёта величины временного интервала, заданного в минутах, в величину, выраженную в часах и минутах.

num = int(input())
print(num, 'мин - это', num // 60, 'час', num % 60, 'минут.')



# Напишите программу, в которой рассчитывается сумма и произведение цифр положительного трёхзначного числа.

num = int(input())
digit3 = num % 10
digit2 = (num // 10) % 10
digit1 = num // 100
print('Сумма цифр =', digit1 + digit2 + digit3)
print('Произведение цифр =', digit1 * digit2 * digit3)



# Дано трехзначное число abc, в котором все цифры различны. Напишите программу, которая выводит шесть чисел, образованных при перестановке цифр заданного числа. 

num = int(input())
c = num % 10
b = (num // 10) % 10
a = num // 100
print(a, b, c, sep = '')
print(a, c, b, sep = '')
print(b, a, c, sep = '')
print(b, c, a, sep = '')
print(c, a, b, sep = '')
print(c, b, a, sep = '')



# Напишите программу для нахождения цифр четырёхзначного числа.

num = int(input())
digit4 = num % 10
digit3 = (num // 10) % 10
digit2 = (num // 100) % 10
digit1 = num // 1000
print('Цифра в позиции тысяч равна', digit1)
print('Цифра в позиции сотен равна', digit2)
print('Цифра в позиции десятков равна', digit3)
print('Цифра в позиции единиц равна', digit4)



# Напишите программу, которая проверяет, что для заданного четырехзначного числа выполняется следующее соотношение: сумма первой и последней цифр равна разности второй и третьей цифр.

num = int(input())
num4 = num % 10
num3 = (num % 100) // 10
num2 = (num % 1000) // 100
num1 = num // 1000
if num1 + num4 == num2 - num3:
    print('ДА')
else:
    print('НЕТ')



# Напишите программу, которая определяет наименьшее из четырёх чисел.

num1 = int(input())
num2 = int(input())
num3 = int(input())
num4 = int(input())
if num3 >= num1 <= num2 and num1 <= num4:
    print(num1)
elif num1 >= num2 <= num3 and num2 <= num4:
    print(num2)
elif num1 >= num3 <= num2 and num3 <= num4:
    print(num3)
else:
    print(num4)



# Напишите программу, которая считывает три числа и подсчитывает сумму только положительных чисел.

num1 = int(input())
num2 = int(input())
num3 = int(input())
if num1 >= 0:
    num1_new = num1
else:
    num1_new = 0
if num2 >= 0:
    num2_new = num2
else:
    num2_new = 0
if num3 >= 0:
    num3_new = num3
else:
    num3_new = 0
print(num1_new + num2_new + num3_new)



# Назовем число красивым, если оно является четырехзначным и делится нацело на 77 или на 1717. Напишите программу, определяющую, является ли введённое число красивым. Программа должна вывести «YES», если число является красивым, или «NO» в противном случае.

num = int(input())
if (num // 1000) > 0 and (num // 10000) == 0 and ((num % 7) == 0 or (num % 17) == 0):
    print('YES')
else:
    print('NO')



# Напишите программу, которая определяет, является ли год с данным номером високосным. Если год является високосным, то выведите «YES», иначе выведите «NO». Год является високосным, если его номер кратен 4, но не кратен 100, или если он кратен 400.

year = int(input())
if ((year % 4) == 0 and (year % 100) != 0) or (year % 400) == 0:
    print('YES')
else:
    print('NO')



# Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли король попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре
# числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом короля
# можно попасть во вторую, или «NO» в противном случае.

num1 = int(input())
num2 = int(input())
num3 = int(input())
num4 = int(input())
if (num1 == (num3 + 1) or num1 == (num3 - 1) or num1 == num3) and (num2 == (num4 - 1) or num2 == (num4 + 1)):
    print('YES')
elif (num1 == (num3 + 1) or num1 == (num3 - 1)) and (num2 == (num4 - 1) or num2 == (num4 + 1) or num2 == num4):
    print('YES')
else:
    print('NO')



# Дан порядковый номер месяца (1, \, 2, \ldots, 12)(1,2,…, 12). Напишите программу, которая выводит на экран количество дней в этом месяце. Принять, что год является невисокосным.

month = int(input())
if month in [1, 3, 5, 7, 8, 10, 12]:
    print(31)
elif month in [4, 6, 9, 11]:
    print(30)
else:
    print(28)



# Напишите программу, которая считывает с клавиатуры два целых числа и строку. Если эта строка является обозначением одной из четырёх математических операций (+, -, *, /), то выведите
# результат применения этой операции к введённым ранее числам, в противном случае выведите «Неверная операция». Если пользователь захочет поделить на ноль, выведите текст «На ноль делить нельзя!».

num1 = int(input())
num2 = int(input())
string = input()
if string == '+':
    print(num1 + num2)
elif string == '-':
    print(num1 - num2)
elif string == '*':
    print(num1 * num2)
elif string == '/' and num2 != 0:
    print(num1 / num2)
elif string == '/' and num2 == 0:
    print('На ноль делить нельзя!')
else:
    print('Неверная операция')



''' На числовой прямой даны два отрезка: [a_1; b_1] и [a_2; b_2]. Напишите программу, которая находит их пересечение.
Пересечением двух отрезков может быть:
отрезок;
точка;
пустое множество.

Формат входных данных
На вход программе подаются 4 целых числа a_1, b_1, a_2, b_2
Формат выходных данных
Программа должна вывести на экран границы отрезка, являющегося пересечением, либо общую точку, либо текст «пустое множество».'''

a1 = int(input())
b1 = int(input())
a2 = int(input())
b2 = int(input())
if (b1 < a2) or (a1 > b2):
    print('пустое множество')
elif (a1 < a2) and (b1 >= a2):
    if b2 > b1 > a2:
        print(a2, b1)
    elif b1 > b2:
        print(a2, b2)
    elif b1 == b2:
        print(a2, b1)
    elif b1 == a2:
        print(b1)
elif (a1 > a2) and (b2 >= a1):
    if b1 > b2 > a1:
        print(a1, b2)
    elif b2 > b1:
        print(a1, b1)
    elif b2 == b1:
        print(a1, b1)
    elif b2 == a1:
        print(a1)
elif a1 == a2:
    if b1 < b2:
        print(a1, b1)
    elif b1 == b2:
        print(a1, b1)
    elif b1 > b2:
        print(a1, b2)



# Заданы две клетки шахматной доски. Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет. Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
# Формат входных данных
# На вход программе подаётся четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.

num1 = int(input())
num2 = int(input())
num3 = int(input())
num4 = int(input())
if (num1 + num2 + num3 + num4) % 2 == 0:
    print('YES')
else:
    print('NO')



# Дано положительное действительное число. Выведите его первую цифру после десятичной точки.

num = float(input())
first_after_dot = ((num * 100) // 10) % 10
print(int(first_after_dot))



# Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.

from math import *

x1 = float(input())
y1 = float(input())
x2 = float(input())
y2 = float(input())
print(sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))



# Даны два целых числа mm и nn. Напишите программу, которая выводит все числа от mm до nn включительно в порядке возрастания, если m < nm<n, или в порядке убывания в противном случае.

m = int(input())
n = int(input())
if m < n:
    for i in range(m, n + 1):
        print(i)
else:
    for i in range(m, n - 1, -1):
        print(i)



# Даны два целых числа mm и nn (m > nm>n). Напишите программу, которая выводит все нечетные числа от mm до nn включительно в порядке убывания.

m = int(input())
n = int(input())
for i in range(m, n - 1, -1):
    if i % 2 != 0:
        print(i)



# На вход программе подаются два целых числа aa и bb (a \le b)(a≤b). Напишите программу, которая подсчитывает количество чисел в диапазоне от aa до bb включительно, куб которых оканчивается на 44 или 99.

a = int(input())
b = int(input())
counter = 0
for i in range(a, b + 1):
    if i ** 3 % 10 == 4 or i ** 3 % 10 == 9:
        counter += 1
print(counter)



# На вход программе подается натуральное число nn. Напишите программу, которая подсчитывает сумму тех чисел от 11 до nn (включительно) квадрат которых оканчивается на 2, \, 52,5 или 88.

n = int(input())
total = 0
for i in range(1, n):
    if (i ** 2) % 10 == 2 or (i ** 2) % 10 == 5 or (i ** 2) % 10 == 8:
        total += i
print(total)



# Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.

total = 1
for i in range(10):
    num = int(input())
    if num != 0:
        total = total * num
print(total)



# На вход программе подается натуральное число nn. Напишите программу, которая вычисляет сумму всех его делителей.

n = int(input())
total = 0
for i in range(1, n + 1):
    if n % i == 0:
        total = total + i
print(total)



# На вход программе подается натуральное число nn, а затем nn различных натуральных чисел, каждое на отдельной строке. Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.

n = int(input())
large = 1
prelarge = 1
for i in range(1, n + 1):
    num = int(input())    
    if num > large:
        prelarge = large
        large = num
    elif num > prelarge:
            prelarge = num
print(large)
print(prelarge)



# Напишите программу, которая считывает последовательность из 10 целых чисел и определяет является ли каждое из них четным или нет.

sum = 0
for i in range(1, 11):
    n = int(input())
    if n % 2 == 0:
        sum = sum + 1
    else:
        sum = sum
if sum == 10:
    print('YES')
else:
    print('NO')



# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами, без кавычек). Напишите программу, которая выводит общее количество членов данной последовательности.

total = 0
word = input()
while word != 'стоп' and word != 'хватит' and word != 'достаточно':
    total += 1
    word = input()
print(total)



# На вход программе подается последовательность целых чисел от 11 до 55, характеризующее оценку ученика, каждое число на отдельной строке. Концом последовательности является любое отрицательное число, либо число большее 55. Напишите программу, которая выводит количество пятерок.

total_5 = 0
num = int(input())
while 0 < num <= 5:
    if num == 5:
        total_5 += 1
        num = int(input())
    else:
        num = int(input())
print(total_5)



# Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к тому же ведьмак не принимает купюры, он принимает только чеканные монеты. В мире ведьмака существуют монеты с номиналами 1, \, 5, \, 10, \, 251,5,10,25.
#Напишите программу, которая определяет какое минимальное количество чеканных монет нужно заплатить ведьмаку.

num = int(input())
total = 0
while num >= 25:
    total += 1
    num = num - 25
while 10 <= num < 25:
    total += 1
    num = num - 10
while 5 <= num < 10:
    total += 1
    num = num - 5
while 1 <= num < 5:
    total += 1
    num = num - 1
print(total)



# Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.

num = int(input())
while num != 0:
    last_digit = num % 10
    print(last_digit)
    num = num // 10



# Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.

num = int(input())
while num != 0:
    last_digit = num % 10
    print(last_digit, end = '')
    num = num // 10



# Дано натуральное число n,(n≥10). Напишите программу, которая определяет его максимальную и минимальную цифры.

n = int(input())
max_num = n % 10
min_num = n % 10
while n != 0:
    last_digit = n % 10
    if last_digit > max_num:
        max_num = last_digit
    elif last_digit <= min_num:
        min_num = last_digit
    n = n // 10
print('Максимальная цифра равна', max_num)
print('Минимальная цифра равна', min_num)



# Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.

n = int(input())
last_digit = n % 10
last_digit2 = n % 10
counter = 0
while n != 0:
    last_digit2 = n % 10
    if last_digit != last_digit2:
        counter += 1
    n = n // 10
if counter == 0:
    print('YES')
else:
    print('NO')



# Дано натуральное число. Напишите программу, которая определяет, является ли последовательность его цифр при просмотре справа налево упорядоченной по неубыванию.

n = int(input())
last_digit = n % 10
counter = 0
while n != 0:
    last_digit2 = n % 10
    if last_digit2 < last_digit:
        counter += 1
    last_digit = last_digit2
    n = n // 10
if counter > 0:
    print('NO')
else:
    print('YES')



# На вход программе подается число n>1. Напишите программу, которая выводит его наименьший отличный от 11 делитель.

n = int(input())
for i in range(2, n + 1):
    if n % i == 0:
        print(i)
        break



# На вход программе подается натуральное число nn. Напишите программу, которая выводит числа от 11 до nn включительно за исключением:
# чисел от 55 до 99 включительно;
# чисел от 1717 до 3737 включительно;
# чисел от 7878 до 8787 включительно.

n = int(input())
for i in range(1, n + 1):
    if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
        continue
    print(i)

total = 0
for x in range(1, 14):
    for y in range(1, 13):
        for z in range(1, 12):
            if 28 * x + 30 * y + 31 * z == 365:
            total += 1
            print('x =', x, 'y =', y, 'z =', z )
print('Общее количество натуральных решений =', total)

for n in range(1, 150):
    for k in range(n, 150):
        for l in range(k, 150):
            for m in range(l, 150):
                sum1 = (n ** 5 + k ** 5 + l ** 5 + m ** 5)
                e = (int(sum1 ** 0.2)
                if sum1 == e ** 5:
                    print(n + k + l + m + e)
                    break




# Дано натуральное число nn. Напишите программу, которая выводит значение суммы 1!+2!+3!+…+n!.

from math import *
n = int(input())
total = 0
for i in range(1, n + 1):
    total += factorial(i)
print(total)



# На вход программе подается натуральное число nn. Напишите программу, которая находит цифровой корень данного числа. Цифровой корень числа nn получается следующим образом: если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.

n = int(input())
total = 0
if 1 <= n < 10:
    total = n
else:
    while n // 10 > 0:
        total = 0
        while n > 0:
            last_digit = n % 10
            total = total + last_digit
            n = n // 10
        n = total
print(total)



# На вход программе подается два натуральных числа aa и bb (a < ba< b). Напишите программу, которая находит натуральное число из отрезка [a;b] с максимальной суммой делителей.

n1 = int(input())
n2 = int(input())
summ_max_counter = 0
i_max_counter = 0
for i in range(n1, n2 + 1):
    counter = 0
    summ = 0
    max_counter = 0
    for j in range(1, i + 1):
        if i % j == 0:
            counter += 1
            summ += j
        if summ >= summ_max_counter:
            max_counter = counter
            i_max_counter = i
            summ_max_counter = summ
            
print(i_max_counter, summ_max_counter)



# На вход программе подаются три строки: имя, фамилия и отчество. Напишите программу, которая выводит инициалы человека.

name = input()
surname = input()
patronymic = input()
print(surname[0], name[0], patronymic[0], sep = '')



# На вход программе подается одна строка состоящая из цифр. Напишите программу, которая считает сумму цифр данной строки.

string = (input())
total = 0
for i in string:
    total += int(i)
print(total)



# На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек), если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).

string = input()
s = len(string)
count = 0
for i in range(s):
    if string[i] in '0123456789':
        count += 1
if count == 0:
    print('Цифр нет')
else:
    print('Цифра')



# На вход программе подается одна строка. Напишите программу, которая определяет сколько в ней одинаковых соседних символов.

s = input()
total = 0
for i in range(len(s) - 1):
    if s[i] == s[i + 1]:
        total += 1
print(total)



# На вход программе подается одна строка с буквами русского языка. Напишите программу, которая определяет количество гласных и согласных букв.

s = input()
s_gl = 0
s_sogl = 0
for i in range(len(s)):
    if s[i] in 'ауоыиэяюёеАУОЫИЭЯЮЁЕ':
        s_gl += 1
    elif s[i] in 'бвгджзйклмнпрстфхцчшщБВГДЖЗЙКЛМНПРСТФХЦЧШЩ':
        s_sogl += 1
    i += 1
print('Количество гласных букв равно', s_gl)
print('Количество согласных букв равно', s_sogl)



# На вход программе подается натуральное число, записанное в десятичной системе счисления. Напишите программу, которая переводит данное число в двоичную систему счисления.

n = int(input())
s = ''
while n > 0:
    if n % 2 == 0:
        s = s + '0'
    else:
        s = s + '1'
    n //= 2
s = s[::-1]
print(s)



# На вход программе подается строка текста. Напишите программу, которая определяет является ли оттенок текста хорошим или нет. Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.

s = input()
good = 'хорош'
if good.lower() in s.lower():
    print('YES')
else:
    print('NO')



# На вход программе подается строка. Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.

s = input()
count = 0
for i in range(len(s)):
    if s[i] == s[i].lower() and s[i] not in '01234567890':
        count += 1
print(count)



# На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.

s = input()
count = 0
for i in range(len(s)):
    if s[i] in '0123456789':
        count += 1
print(count)



# На вход программе подается строка текста. Напишите программу, которая проверяет, что строка заканчивается подстрокой .com или .ru.

s = input()
if s.endswith('.com') == True or s.endswith('.ru') == True:
    print('YES')
else:
    print('NO')
# На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс. Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

s = input()
if s.find('f') == -1:
    print('NO')
else:
    if s.count('f') == 1:
        print(s.find('f'))
    else:
        print(s.find('f'), s.rfind('f'))



# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.

s = input()
start = s.find('h')
end = s.rfind('h')
print(s[:start] + s[end + 1:])



# На вход программе подается натуральное число nn, а затем nn строк. Напишите программу, которая создает из указанных строк список и выводит его.

n = int(input())
my_list = []
for i in range(n):
    j = input()
    my_list.append(j)
print(my_list)



# При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.
# На вход программе подается натуральное число nn, а затем nn различных натуральных чисел. Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.


n = int(input())
list1 = []
for i in range(n):
    x = int(input())
    list1.append(x)
max_item = list1[0]
max_ind = 0
min_item = list1[0]
min_ind = 0
for k in range(len(list1)):
    if list1[k] >= max_item:
        max_item = list1[k]
        max_ind = k
del list1[max_ind]
for j in range(len(list1)):
    if list1[j] <= min_item:
        min_item = list1[j]
        min_ind = j
del list1[min_ind]
print(*list1, sep = '\n')



# На вход программе подается натуральное число nn, а затем nn строк. Напишите программу, которая выводит только уникальные строки, в том же порядке, в котором они были введены.

n = int(input())
list1 = []
list2 = []
for i in range(n):
    s = input()
    list1.append(s)
    if s not in list2:
        list2.append(s)
        print(s, sep = '\n')



# На вход программе подается натуральное число nn, затем nn строк, затем еще одна строка — поисковый запрос. Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.

n = int(input())
list1 = []
for i in range(n):
    s = input()
    list1.append(s)
query = input()
for i in range(len(list1)):
    if query.lower() in list1[i].lower():
        print(list1[i], end = '\n')



# На вход программе подается строка текста, содержащая целые числа. Напишите программу, которая по заданным числам строит столбчатую диаграмму.

string = input()
string = string.split()
string = list(string)
for i in range(len(string)):
    num = int(string[i])
    print('+' * num)



# На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой. Напишите программу, которая определяет является ли введенная строка текста корректным ip-адресом.

ip_addr = input()
ip_addr = ip_addr.split('.')
count = 0
for i in range(len(ip_addr)):
    if 0 <= int(ip_addr[i]) <= 255:
        count += 1
if count == 4:
    print('ДА')
else:
    print('НЕТ')



# На вход программе подается строка текста и строка разделитель. Напишите программу, которая вставляет указанный разделитель между каждым символом введенной строки текста.

text = input()
text = list(text)
dev = input()
for i in range(len(text) - 1):
    print(text[i] + dev, end = '')
print(text[-1])



# Напишите функцию print_digit_sum(), которая принимает одно целое число num и выводит на печать сумму его цифр.

def print_digit_sum(num):
    num = str(num)
    num = list(map(int, num))
    sum = 0
    for i in range(len(num)):
        sum += num[i]
    print(sum)

num = int(input())
# вызываем функцию
print_digit_sum(num)



# Напишите функцию get_days(month), которая принимает в качестве аргумента номер месяца и возвращает количество дней в данном месяце.

# объявление функции
def get_days(month):
    result = 0
    if num == 2:
        result = 28
    elif num in [4, 6, 9, 11]:
        result = 30
    else:
        result = 31
    return result

# считываем данные
num = int(input())

# вызываем функцию
print(get_days(num))



# Напишите функцию number_of_factors(num), принимающую в качестве аргумента число и возвращающую количество делителей данного числа.

def number_of_factors(num):
    sum = 0
    for i in range(1, num + 1):
        if num % i == 0:
            sum += 1
    return sum

# считываем данные
n = int(input())

# вызываем функцию
print(number_of_factors(n))




# На вход программе подается строка текста. Напишите программу, которая определяет является ли введенная 
# строка корректным телефонным номером. Строка текста является корректным телефонным номером если она имеет формат:

    # abc-def-hijk или
    # 7-abc-def-hijk

где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.
try:
    string1 = list(map(int, input().split('-')))
    if len(string1) == 3 and 100 <= string1[0] <= 999 and 100 <= string1[1] <= 999 and 1000 <= string1[2] <= 9999:
        print('YES')
    elif len(string1) == 4 and string1[0] == 7 and 100 <= string1[1] <= 999 and 100 <= string1[2] <= 999 and 1000 <= string1[3] <= 9999:
        print('YES')
    else:
        print('NO')
except ValueError:
    print('NO')

