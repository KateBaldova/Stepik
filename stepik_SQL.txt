#1.3. Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.

SELECT author AS Автор, count(title) AS Различных_книг, sum(amount) AS Количество_экземпляров
FROM book
GROUP BY author

#1.3. Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.

SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, AVG(price) AS Средняя_цена
FROM book
GROUP BY author

#Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой.

SELECT author, 
    ROUND(SUM(price*amount),2) AS Стоимость, 
    ROUND(SUM((price*amount*0.18)/(1+0.18)),2) AS НДС, 
    ROUND(SUM((price*amount)/(1+0.18)),2) AS Стоимость_без_НДС
FROM book
GROUP BY author

#Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.

SELECT MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена, 
    ROUND(AVG(price),2) AS Средняя_цена
FROM book

#Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.

SELECT author, SUM(price*amount) AS Стоимость
FROM book
WHERE title <> 'Идиот' AND title <> 'Белая гвардия'
GROUP BY author
HAVING SUM(price*amount) > 5000.00
ORDER BY Стоимость DESC

#Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.

SELECT author, title, price
FROM book
WHERE price <= (
    (SELECT MIN(price) FROM book) + 150)
ORDER BY price

#Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.

SELECT author, title, amount
FROM book
WHERE amount IN (
    SELECT amount
    FROM book
    GROUP BY amount
    HAVING COUNT(amount) = 1
    )

#Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.

SELECT author, title, price
FROM book
WHERE price < ANY (
    SELECT MIN(price)
    FROM book
    GROUP BY author)

#Выбрать книги, цена которых отличается от средней цены всех книг более чем на 10 %. Вывести автора, название и цену таких книг, а также среднюю цену книг (округлить до двух знаков после запятой) как Средняя_цена. Результат вывести в порядке возрастания цены.

SELECT author, title, price, (SELECT ROUND(AVG(price), 2) FROM book) AS Средняя_цена
FROM book
WHERE price > (
    SELECT (AVG(price) * 1.1)
    FROM book)
ORDER BY price

#Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN ('Булгаков М.А.', 'Достоевский Ф.М.');

#Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN (
    SELECT author
    FROM book);

#Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.

UPDATE book
SET price = price * 0.9
WHERE amount BETWEEN 5 AND 10;

#В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%.

UPDATE book
SET buy = IF(buy > amount, amount, buy), price = IF(buy = 0, price*0.9, price);

#Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amountтаблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).

UPDATE book, supply 
SET book.amount = book.amount + supply.amount, book.price = (book.price + supply.price)/2
WHERE book.title = supply.title AND book.author = supply.author;

#Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.

DELETE FROM supply
WHERE author IN (
    SELECT author
    FROM book
    GROUP BY author
    HAVING SUM(amount)>10);

#Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.

CREATE TABLE ordering AS
SELECT author, title, (
    SELECT ROUND(AVG(amount))
    FROM book) AS amount
FROM book
WHERE amount < (
    SELECT ROUND(AVG(amount))
    FROM book);

#Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.

SELECT name, city, per_diem, date_first, date_last
FROM trip
WHERE name LIKE '%а _._.'
ORDER BY date_last DESC;

#Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.

SELECT DISTINCT name
FROM trip
WHERE city = 'Москва'
ORDER BY name;

#Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество.

SELECT DISTINCT city, count(city) AS Количество
FROM trip
GROUP BY city
ORDER BY city;

#Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.

SELECT city, count(city) AS Количество
FROM trip
GROUP BY city
ORDER BY Количество DESC
LIMIT 2;

#Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).

SELECT name, city, (DATEDIFF(date_last, date_first) + 1) AS Длительность
FROM trip
WHERE city NOT IN ('Москва', 'Санкт-Петербург')
ORDER BY Длительность DESC, city DESC;

#Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.

SELECT name, city, date_first, date_last
FROM trip
WHERE (DATEDIFF(date_last, date_first)+1) IN (
    SELECT MIN(DATEDIFF(date_last, date_first)+1)
    FROM trip);

#Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .

SELECT name, city, date_first, date_last
FROM trip
WHERE MONTH(date_first) = MONTH(date_last)
ORDER BY city, name;

#Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.

SELECT DISTINCT MONTHNAME(date_first) AS Месяц, COUNT(MONTHNAME(date_first)) AS Количество
FROM trip
GROUP BY MONTHNAME(date_first) 
ORDER BY Количество DESC, Месяц;

#Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.

SELECT name, city, date_first, (DATEDIFF(date_last, date_first) + 1) * per_diem AS Сумма
FROM trip
WHERE date_first LIKE '2020-02-__' OR date_first LIKE '2020-03-__'
ORDER BY name, Сумма DESC

#Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.

SELECT name, SUM((DATEDIFF(date_last, date_first)+1) * per_diem) AS Сумма
FROM trip
GROUP BY name
HAVING count(name) > 3
ORDER BY Сумма DESC

# В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.

INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL),
('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL);

# Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.
# Таблица traffic_violationсоздана и заполнена.
# Важно! Сравнение значения столбца с пустым значением осуществляется с помощью оператора IS NULL.

UPDATE fine f, traffic_violation tv
SET f.sum_fine = tv.sum_fine
WHERE f.violation = tv.violation AND f.sum_fine IS NULL;

SELECT * FROM fine

# Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.

SELECT name, number_plate, violation
FROM fine
GROUP BY name, number_plate, violation
HAVING count(*) >=2
ORDER BY name, number_plate, violation;

# В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей.

UPDATE fine, (
    SELECT name, number_plate, violation
    FROM fine
    GROUP BY name, number_plate, violation
    HAVING count(*) >= 2
    ORDER BY name, number_plate, violation) query_in
SET fine.sum_fine = (fine.sum_fine * 2)
WHERE fine.name=query_in.name AND fine.number_plate=query_in.number_plate AND fine.violation=query_in.violation AND fine.date_payment IS NULL;

# Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты:
# Необходимо:
# в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment; 
# уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.

UPDATE fine f, payment p
SET f.date_payment = p.date_payment, f.sum_fine = if((f.date_payment-f.date_violation)<=20, f.sum_fine/2, f.sum_fine)
WHERE f.date_payment IS NULL AND p.date_payment IS NOT NULL AND f.name=p.name AND f.number_plate=p.number_plate AND f.violation=p.violation;

# Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.

CREATE TABLE back_payment AS
SELECT name, number_plate, violation, sum_fine, date_violation
FROM fine f
WHERE f.date_payment IS NULL;

# Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года. 

DELETE FROM fine
WHERE date_violation < '2020-02-01';

# Создать таблицу author следующей структуры:
# Поле    Тип, описание
# author_id   INT PRIMARY KEY AUTO_INCREMENT
# name_author VARCHAR(50)

CREATE TABLE author (
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name_author VARCHAR(50)
    );

# Заполнить таблицу author. В нее включить следующих авторов:
# Булгаков М.А.
# Достоевский Ф.М.
# Есенин С.А.
# Пастернак Б.Л.

INSERT INTO author (name_author)
VALUES ('Булгаков М.А.'),
       ('Достоевский Ф.М.'),
       ('Есенин С.А.'),
       ('Пастернак Б.Л.');

# Перепишите запрос на создание таблицы book , чтобы ее структура соответствовала структуре, показанной на логической схеме (таблица genre уже создана, порядок следования столбцов - как на логической схеме в таблице book, genre_id  - внешний ключ) . Для genre_id ограничение о недопустимости пустых значений не задавать. В качестве главной таблицы для описания поля  genre_idиспользовать таблицу genre следующей структуры:
# Поле    Тип, описание
# genre_id    INT PRIMARY KEY AUTO_INCREMENT
# name_genre  VARCHAR(30)

CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL,
    genre_id INT, 
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id), 
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id)
);

# Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author, должны удаляться все записи о книгах из таблицы book, написанные этим автором. А при удалении жанра из таблицы genre для соответствующей записи book установить значение Null в столбце genre_id.

CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL,
    genre_id INT, 
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE, 
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
);

# Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book, первые 5 записей уже добавлены:

INSERT INTO book (title, author_id, genre_id, price, amount)
VALUES ('Стихотворения и поэмы', 3, 2, 650.00, 15),
       ('Черный человек', 3, 2, 570.20, 6),
       ('Лирика', 4, 2, 518.99, 2);

# Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.

SELECT title, name_genre, price
FROM book INNER JOIN genre
ON genre.genre_id = book.genre_id
WHERE amount > 8
ORDER BY price DESC

# Вывести все жанры, которые не представлены в книгах на складе.

SELECT name_genre
FROM genre LEFT JOIN book
ON genre.genre_id = book.genre_id
WHERE title IS NULL

# Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.

SELECT name_city, name_author, DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND() * 365) DAY) AS Дата
FROM city, author
ORDER BY name_city, Дата DESC

# Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.

SELECT name_genre, title, name_author
FROM
    genre
    INNER JOIN book ON genre.genre_id = book.genre_id
    INNER JOIN author ON author.author_id = book.author_id
WHERE name_genre LIKE '%роман%'
ORDER BY title;

# Посчитать количество экземпляров  книг каждого автора из таблицы author.  Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде. Последний столбец назвать Количество.

SELECT name_author, SUM(amount) AS Количество
FROM author LEFT JOIN book ON author.author_id = book.author_id
GROUP BY name_author
HAVING SUM(amount) < 10 OR SUM(amount) IS NULL
ORDER BY Количество

# Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. Поскольку у нас в таблицах так занесены данные, что у каждого автора книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. Пусть у нас  книга Есенина «Черный человек» относится к жанру «Роман», а книга Булгакова «Белая гвардия» к «Приключениям» (эти изменения в таблицы уже внесены).

SELECT name_author
FROM author LEFT JOIN book ON author.author_id = book.author_id
GROUP BY name_author
HAVING COUNT(DISTINCT(genre_id)) = 1
ORDER BY name_author

# Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество экземпляров книг), написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг виде. Самым популярным считать жанр, общее количество экземпляров книг которого на складе максимально.

SELECT title, name_author, name_genre, price, amount
FROM 
    book 
    INNER JOIN author ON book.author_id = author.author_id
    INNER JOIN genre ON book.genre_id = genre.genre_id
GROUP BY title, name_author, name_genre, price, amount, genre.genre_id
HAVING genre.genre_id IN (
    SELECT query_in_1.genre_id
    FROM
        (SELECT genre_id, SUM(amount) AS sum_amount
        FROM book
        GROUP BY genre_id) query_in_1
    INNER JOIN 
        (SELECT genre_id, sum(amount) AS sum_amount
        FROM book
        GROUP BY genre_id
        ORDER BY SUM(amount) DESC
        LIMIT 1) query_in_2
    ON query_in_1.sum_amount = query_in_2.sum_amount
    ) 
ORDER BY title;

# Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора, а также посчитать общее количество экземпляров книг в таблицах supply и book,  столбцы назвать Название, Автор  и Количество.

SELECT title AS Название, name_author AS Автор, (
    SELECT SUM(supply.amount) + SUM(book.amount)
    FROM supply
    INNER JOIN book
    USING(title, price)
    GROUP BY title, price) AS Количество
FROM supply
INNER JOIN book
USING(title, price)
INNER JOIN author
USING(author_id)
GROUP BY title, name_author

# Случайным образом отберите 3 вопроса по дисциплине «Основы баз данных». В результат включите столбцы question_id и name_question.

SELECT question_id, name_question
FROM question INNER JOIN subject ON question.subject_id = subject.subject_id
WHERE name_subject = 'Основы баз данных'
ORDER BY RAND()
LIMIT 3

# Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до двух знаков после запятой. Вывести фамилию студента, название предмета, дату и результат. Последний столбец назвать Результат. Информацию отсортировать сначала по фамилии студента, потом по убыванию даты попытки.

SELECT name_student, name_subject, date_attempt, ROUND(sum(is_correct / 3 * 100), 2) AS 'Результат'
FROM student INNER JOIN attempt ON student.student_id = attempt.student_id
INNER JOIN testing ON testing.attempt_id = attempt.attempt_id
INNER JOIN answer ON answer.answer_id = testing.answer_id
INNER JOIN subject ON subject.subject_id = attempt.subject_id
GROUP BY name_student, name_subject, date_attempt
ORDER BY name_student, date_attempt DESC

# Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.

SELECT buy_id, title, price, buy_book.amount
FROM buy_book INNER JOIN buy USING(buy_id)
INNER JOIN client USING(client_id)
INNER JOIN book USING(book_id)
WHERE name_client = 'Баранов Павел'
ORDER BY buy_id, title

# Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.

SELECT buy_id, name_client, sum(price * buy_book.amount) AS 'Стоимость'
FROM buy INNER JOIN client USING(client_id)
INNER JOIN buy_book USING(buy_id)
INNER JOIN book USING(book_id)
GROUP BY buy_id, name_client
ORDER BY buy_id

# Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.

INSERT INTO client(name_client, city_id, email)
SELECT 'Попов Илья', city_id, 'popov@test'
FROM city
WHERE name_city = 'Москва';

SELECT * FROM client

# В таблицу buy_book добавить заказ с номером 5. Этот заказ должен содержать книгу Пастернака «Лирика» в количестве двух экземпляров и книгу Булгакова «Белая гвардия» в одном экземпляре.

INSERT INTO buy_book (buy_id, book_id, amount)
VALUES (5, (SELECT book_id FROM book WHERE title = 'Лирика' AND author_id = (SELECT author_id FROM author WHERE name_author = 'Пастернак Б.Л.')), 2),
(5, (SELECT book_id FROM book WHERE title = 'Белая гвардия' AND author_id = (SELECT author_id FROM author WHERE name_author = 'Булгаков М.А.')), 1);

SELECT * FROM buy_book

# Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора, цену, количество заказанных книг и  стоимость. Последний столбец назвать Стоимость. Информацию в таблицу занести в отсортированном по названиям книг виде.

CREATE TABLE buy_pay AS
SELECT title, name_author, price, buy_book.amount, price * buy_book.amount AS 'Стоимость'
FROM book INNER JOIN author USING(author_id)
INNER JOIN buy_book USING(book_id)
WHERE buy_id = 5
ORDER BY title;

SELECT * FROM buy_pay

# Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5. Куда включить номер заказа, количество книг в заказе (название столбца Количество) и его общую стоимость (название столбца Итого). Для решения используйте ОДИН запрос.

CREATE TABLE buy_pay AS
SELECT buy_book.buy_id, SUM(buy_book.amount) AS 'Количество', SUM(buy_book.amount * book.price) AS 'Итого'
FROM buy_book INNER JOIN book USING(book_id)
WHERE buy_book.buy_id = 5;

SELECT * FROM buy_pay

# В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине «Основы баз данных». Установить текущую дату в качестве даты выполнения попытки.

INSERT INTO attempt(student_id, subject_id, date_attempt, result)
VALUES((SELECT student_id FROM student WHERE name_student = 'Баранов Павел'), (SELECT subject_id FROM subject WHERE name_subject = 'Основы баз данных'), NOW(), NULL);

SELECT * FROM attempt













